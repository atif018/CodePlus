<resources>
    <string name="app_name">Code+</string>
    <string name="program_select">Please select a programming language to learn?</string>
    <string name="select_java">Java!</string>
    <string name="select_python">Python!</string>
    <string name="facebook_app_id">978526122346925</string>
    <string name="fb_login_protocol_scheme">fb978526122346925</string>
    <string name="start_app">Start!</string>
    <string name="what_is_java_text">1.1 What is Java?</string>
    <string name="what_is_java_body">Java officially appeared in 1995 and, since then,
        has been widely adopted by programmers the world over. Java is one of the most widely
        used programming languages and is used in everything from building Web Applications to
        developing Android Apps and many things in-between!\n\nJava has several important
    features that helped it explode in popularity including a huge library of packages to help
        programmers make many kinds of programs, how safe it is to use, how portable it
    is (Can run the same program on different Operating Systems) and how much simpler it is to use
        over another popular language - C++.\n\n</string>
    <string name="intro_to_java_programs">1.2 Introduction to Java Programs</string>
    <string name="intro_to_java_programs_body1">The following is the structure of a basic Java
        program:</string>
    <string name="intro_to_java_programs_body2">This may look a bit daunting but hang in there! We
    just need to deconstruct what\'s being shown so that it\'s easier to understand.\n\n</string>
    <string name="java_deconstruct">1.2.1 Deconstructing the basic Java program</string>
    <string name="java_deconstruct_body">In the purple box, we have \"public class HelloWorld\" - Using
        the reserved word \"public\" means that something in the program, from Methods (Which you\'ll
        encounter later) to Classes, can be used by the public. You can have both public and private
        methods and classes but can only have one public class. This public class has the same name
        as the source file that it resides in.\n\nA \"class\" can be thought of as a blueprint for
        something, for example a Person. From this blueprint, you can create something called
        \"Objects\" that you can use to do very interesting things as part of an important aspect of
        programming called \"Object\-Oriented Programming\".\n\nFinally, \"HelloWorld\" is the name
        of this class.\n\nIn effect, the entire statement is saying that you\'re \"declaring a new
        public class with the name \"HelloWorld\"\". After declaring the class, you must use opening
        and closing braces (\"{\" and \"}\") where code defining the class is written.\n\n\n</string>
    <string name="java_main_methods">1.2.2 Main methods</string>
    <string name="java_main_methods_body">In the blue box, we have \"public static void main(String[]
        main)\" - This is something called a \"main method\" and how to declare it.\n\nA main method is
        compulsory in Java programs and all Java programs must have one.\n\nYou may be asking \"But
        what is a Method anyway?\" - A basic example would be as follows. Suppose you have a goal to
        accomplish. To get to that goal, you\'d break that goal down into a series of steps you would
        take to reach that goal. Imagine writing those steps down on a piece of paper.\n\nAll those
        steps you\'d take collectively are what a Method is. A Method gives an output as well which
        would be the goal that you\'re trying to reach. You will learn more about Methods later.\n\nAs
        with classes, Methods should also use opening and closing braces where code defining the method
        should be written.\n\n\n</string>
    <string name="java_statements">1.2.3 Statements in Java</string>
    <string name="java_statements_body">In the black box, we have \"System.out.println(\"Hello,
        world!\");\" - This is something called a \"statement\" and how to declare them. Statements
        are basically the same as those steps that we talked about in the previous section.
        Each statement is an instruction to do something and are read in order in any Method, Class or
        program. You always place a \";\" (A semi-colon) at the end of the statement so the Java program
        knows where the statement finishes.\n\n\"System.out.println\" is a Method. In this example,
        you call a Method to print something. You can see that \"Hello, World!\" has been placed between
        the brackets. Anything placed in-between the brackets after calling a Method is called an
        \"argument\". The argument is sent to the Method and the Method uses it to do something. In
        this case, the argument \"Hello, World\" is sent to the System.out.println method and asks it
        to print it out on-screen.\n\nFinally, anything in quotation marks, like \"Hello, World!\" is
    called a String. We\'ll learn more about Strings later.\n\n\n</string>
    <string name="go_to_next">Continue</string>
    <string name="go_to_quiz">Quiz!</string>
    <string name="possible_answers">Possible answers: </string>
    <string name="java_quiz_1">How many public classes can a Java Source File have?</string>
    <string name="java_quiz_1_answer1">One</string>
    <string name="java_quiz_1_answer2">Two</string>
    <string name="java_quiz_1_answer3">Three</string>
    <string name="java_quiz_2">Please complete the following:</string>
    <string name="java_quiz_2_answer1">String</string>
    <string name="java_quiz_2_answer2">Main</string>
    <string name="java_quiz_2_answer3">Class</string>
    <string name="text_public">public</string>
    <string name="text_helloworld">HelloWorld</string>
    <string name="java_quiz_3">What kind of Method must every Java program have?</string>
    <string name="java_quiz_3_answer1">Class</string>
    <string name="java_quiz_3_answer2">Println</string>
    <string name="java_quiz_3_answer3">Main</string>
    <string name="java_pseudocode">1.3 The importance of Pseudocode and Algorithms</string>
    <string name="java_pseudocode_body">Before beginning any programming, it is good practice to break
    a problem down into a series of steps using simple language. For example, let\'s assume that you
        wanted to add every number from 1 to 100 and then show the total after adding all the numbers.
        You would start with 1, add 2, then add 3 and continue until you add 100 after which
        you\'d show the total.\n\nFirst, the number that needs to be added could be stored under
        \"Current Number\" which would increment by 1 after any addition done. You\'d also need a
        running total so that could be stored under \"Total\".
    The steps that you take could be as follows:\n\n1. Set Total to 0.\n2. Set Current Number to 1.\n3.
        Add Total and Current Number.\n4. Store result in Total.\n5. Increase Current Number by 1.\n6.
    Add Total and Current Number.\n..\nAnd keep repeating until Current Number is 100 before showing the
        total.\n\nWhat we did above was break down a goal into a series of steps that tell you clearly
    and exactly how to achieve that goal. This process can be called \"Pseudocode\" or, as it\'s more
    commonly known, an \"Algorithm\". An Algorithm needs to be easy to understand and you should be
    able to program it into a computer.\n\n\n</string>
    <string name="java_quiz_4">What should you design prior to starting any programming?</string>
    <string name="java_quiz_4_answer1">Class</string>
    <string name="java_quiz_4_answer2">Algorithm</string>
    <string name="java_quiz_4_answer3">Method</string>
    <string name="java_structure">1.4 The importance of practicing your programming skills</string>
    <string name="java_structure_body">Java programs typically consist of classes, methods, a main method,
    objects, interfaces, arrays, variables and many other components including a rich library. So how would
    you know when and where to use these components? And how can you become a good programmer?\n\nWhat
    it comes down to is practice! Practice, practice and practice more building Java programs since that
    really is the quickest way to learn how things come together and work, whether you\'re building small
    programs or larger, more complicated ones. At this stage, your Java knowledge will be limited but, as
        you learn more, the importance the practicing to program cannot be understated.\n\nWhat programs can
        be used for a programmer just starting out? One particular one that\'s highly recommended is \"BlueJ\"
        but there are others that those new to programming can use including \"Alice\" and another called
        \"Scratch\".\n\n\n</string>
    <string name="go_to_end_quiz">End of Chapter Quiz!</string>
    <string name="java_quiz_5">What should you always place after any declaration of a Class or Method?</string>
    <string name="java_quiz_5_answer1">Brackets</string>
    <string name="java_quiz_5_answer2">Braces</string>
    <string name="java_quiz_5_answer3">Parentheses</string>
    <string name="java_quiz_6">Please complete the following:</string>
    <string name="java_quiz_6_answer1">Println</string>
    <string name="java_quiz_6_answer2">Class</string>
    <string name="java_quiz_6_answer3">Object</string>
    <string name="text_statement">System.out.</string>
    <string name="text_argument">(\"Hello, World!\");</string>
    <string name="sr_text">How difficult was this topic for you?</string>
    <string name="java_sr_title">About this App</string>
    <string name="java_sr_text">This app has a special feature that incorporates a learning
    technique called \"Spaced Repetition\". The technique involves the regular repeating of material
    that you want to learn or have learned so that your brain better retains the knowledge learned.\n\n
        If you activate this feature then, at the end of each subtopic, you will be asked how confident
        you are with what you have learned. Depending on what is chosen, the same subtopic will be shown to
    you to go over however many times you want until you are confident with the material shown. This
    repetition of subtopics will only be done at the end of every topic.</string>
    <string name="java_sr_option">Would you like to activate this feature?</string>
    <string name="java_activate_button">Activate</string>
    <string name="java_dont_activate_button">Don\'t activate</string>
    <string name="what_is_data_text">2.1 Storing values as Variables</string>
    <string name="what_is_data_body">Imagine that you have an empty box in front of you. You open the lid
    and place the number \"5\" in there and then close the lid. This box is then used in useful ways for
    other things, as shown in the following example.</string>
    <string name="what_is_data_body1">The box is considered a variable. When we assign a value to that variable,
    the variable stores that value. In the example above, "5" gets stored in the box. If we wanted to store
    a new value in the box, that can also be done by overwriting the value stored in the box.</string>
    <string name="initialise_variable_title">2.1.1 How to declare variables</string>
    <string name="how_to_initialise_body">In the previous section, you saw how to place and store a
    value in a box. Now, you will be shown how to do it in a Java program! Below, there is an image.</string>
    <string name="how_to_initialise_body1">Say that we want to count the number of Apples we have and store
    the value. Looking at the image above, you\'ll see that there is something called an \"int\", then
    something called \"numberOfApples\" and all of that seems to equal \"4\". This is an example of how to
    store a value in a variable and to \"initialise\" it.\n\nYou must always initialise a variable before
        storing anything in it and/or using it. This is done as displayed above - First, you declare the
        type of value (Can be an integer, float, string or a few others which you will learn about in the
        next section). After that, you choose a name for your variable and, in the example above, we\'ve
        chosen \"numberOfApples\". Finally, you state what value you want the variable to take. In this
        case, it\'s \"4\".\n\nAlways make sure to end these statements with a semi-colon.\n\n</string>
    <string name="types_variable_title">2.1.2 Types of Variables</string>
    <string name="types_variable_body">Below are the types of variables that you can declare. The most popular are:\n\n\"int\" -
    an Integer which is any whole number, for example \"1\", \"1345\" or \"4293\". You can only store
    integers between about -2 billion to +2 billion.\n\n\"double\" - Double values are numbers which are
    fractional such as \"3.55\", \"4293.493762\" or \"3048723.736254224\".\n\n\"short\" - A short integer
    where the value is between around -32,000 to +32,000. \n\n\"long\" - A long integer where it can store
        values bigger than the standard int type.\n\n\There's also a \"byte\", \"float\" and \"char\" types.\n</string>
    <string name="types_variable_body1">Let\'s say that you wanted to store \"4\" in \"numberOfApples\",
    then you would initialise the variable with \"4\". If you wanted to store \"Hello\" in a variable called
    \"greeting\", then you would initialise the variable with \"string\". You must always use the same types
    of variables when initialising and storing otherwise you will get an error and types of variables are case-sensitive.
        For example, if a variable is
    a string type, you must always store a string value in that variable.\n\nWhen naming variables, you should
    use \"camel-case\". Camel-case naming is where the first word is lowercase and any following words capitalise
    the first letter. For example, \"heightOfPlant\" or \"totalSize\" would be appropriate names to use.\n\nYou should
    always start the variable name with either an underscore or a lowercase letter. The rest of the name can consist
    of underscores, letters or numbers. You only need to initialise a variable once. After that, you can add new values
    to the variable by simply typing, using the example in the previous example:\n\nnumberOfApples = 6;\n\nif you want
    to change the value stored. The new value overwrites the old one.\n\n\n</string>
    <string name="final_variable_title">2.1.3 The \"final\" variable constant</string>
    <string name="final_variable_body">You can use the keyword \"final\" to stop any attempt to change the value of
    a variable. The way to do that is as follows:\n\nfinal int NUMBER_OF_APPLES = 4;\n\nUsing \"final\" keeps the value
    at 4 for this variable. You must use the keyword before declaring and initialising any variables, just like in the
        example above.\n\nFinally, the variable name should be in caps to make it easier when reading code.\n\n</string>
    <string name="java_quiz_7">Please complete the following:</string>
    <string name="java_quiz_7_answer1">Double</string>
    <string name="java_quiz_7_answer2">String</string>
    <string name="java_quiz_7_answer3">double</string>
    <string name="java_quiz_8">If you saw \"quantity++\" in some Java code, what does it mean?</string>
    <string name="java_quiz_8_answer1">Add twice</string>
    <string name="java_quiz_8_answer2">Increment</string>
    <string name="java_quiz_8_answer3">Decrement</string>
    <string name="java_quiz_9">When using the method charAt, what does .charAt(4) return in the string \"Jasmine\"?</string>
    <string name="java_quiz_9_answer1">n</string>
    <string name="java_quiz_9_answer2">m</string>
    <string name="java_quiz_9_answer3">i</string>
    <string name="java_quiz_10">What number type is the number \"43.564\"?</string>
    <string name="java_quiz_10_answer1">int</string>
    <string name="java_quiz_10_answer2">double</string>
    <string name="java_quiz_10_answer3">short</string>
    <string name="java_quiz_11">Please complete the following:</string>
    <string name="java_quiz_11_answer1">long</string>
    <string name="java_quiz_11_answer2">Integer</string>
    <string name="java_quiz_11_answer3">string</string>
    <string name="java_quiz_12">What is the term used to describe variable names that start with a
    lower-case letter or underscore and capitalise every subsequent word, eg. \"numberOfCars\"?</string>
    <string name="java_quiz_12_answer1">Camelcase</string>
    <string name="java_quiz_12_answer2">Reserved</string>
    <string name="java_quiz_12_answer3">Objects</string>
    <string name="text_initialise">sumOfFractions = 3.14159265;</string>
    <string name="java_arithmetic">2.2 Arithmetic with variables</string>
    <string name="java_arithmetic_body">You can use arithmetic with different variables. Suppose we have
    the following variables:\n\nnumberOfApples = 4;\nnumberOfBananas = 5;\n\nTo find the number of apples and
    bananas we have, we can type the following in Java:\n\nnumberOfApples * numberOfBananas;\n\nSo what\'s
    happening here? We\'re asking Java to take whatever is stored in numberOfApples and multiply it with the
    value in numberOfBananas. But there\'s a problem here, namely where do we store the result? We declare and
    initialise a new variable!\n\nint totalNumberOfFruit = numberOfApples * numberOfBananas;\n\nFor arithmetic
    in Java, we use the same symbols as we would using mathematics. The symbols used are \"+\" for addition, \"-\" for
    subtraction, \"*\" for multiplication and \"/\" for division. There is a special symbol that can be used - \"%\"
    which is called the modulus. The modulus returns the remainder of an equation. An example is as follows:\n\nint sum
    = 5 % 2;\n\nThe answer is 1 because 2 goes twice into 5 and leaves a remainder of 1.\n\nYou can also use
    other mathematical terms such as brackets and methods like calculating the square root.\n\n\n</string>
    <string name="java_arithmetic2">2.2.1 Arithmetic with variables 2</string>
    <string name="java_arithmetic2_body">If you just want to add or subtract 1, then you can use a shorthand way of
        doing so. Let\'s say that you want to increase or decrease numberOfApples by 1:\n\nTo
        increase by 1: numberOfApples++;\nTo decrease by 1: numberOfApples--;\n\nFinally, it is allowed to use
    the same variable and add something to it, then store the new value in the old variable. For example:
        \n\nnumberOfApples = numberOfApples +2;\n\nAll statements are read right to left. That means that the right-side
        of an equation is calculated first before storing the value in the variable on the left-side.
        numberOfApples is already set to 4 as was shown in the previous section. Java takes that value, adds
    2 to it and then stores it in the same variable.\n\n\n</string>
    <string name="java_strings">2.3 Using Strings</string>
    <string name="java_strings_body">You may be asking \"What are Strings\"? Strings are basically anything
    encapsulated by a pair of quotation marks like \"red\" or \"banana\". Anything within those quotation marks
    can be used as a value and/or stored in a string variable. An example is as follows where a string variable
    is initialised and the word \"red\" is stored within it.\n\nstring colour = \"red\";\n\nA string is something
    called an \"object\" (Which you will learn more about later) and that means that it can be manipulated.
    \n\nYou can find the length of the colour string by doing the following:\n\nint colourWordLength =
    colour.length();\n\nThe dot after \"colour\" (An object) means that you're calling a method (Which you\'ll
        learn more about later too) and the \"length\" method allows you to find the length.\n\n\n</string>
    <string name="java_strings2">2.3.1 Using Strings 2</string>
    <string name="java_strings2_body">Strings can be something called \"concatenated\". This involves taking
    some strings and turning them into one longer one. An example is as follows:\n\nstring firstWord = \"My\";
    \n\nstring secondWord = \"name\";\n\nstring thirdWord = \"is\";\n\nstring fourthWord = \"Mike\";\n\nYou now
    have four strings. If you wanted to concatenate them, you\'d do the following:\n\nstring message =
    firstWord + secondWord + thirdWord + fourthWord;\n\nThe result of that concatenation would be \"My name
    is Mike\".\n\nTo obtain a single character in a string, you would do the following:\n\nstring colour = \"red\";
    \nchar singleLetter = colour.charAt(1);\n\nThe variable \"singleLetter\" would be set to \"e\". You may be asking
    why and how it works? All characters in a string start at position 0. So, in the string \"red\", \"r\" is at
    position 0 and \"d\" is at position 2. What \"charAt\" does is look for the character at the position number
    that you have put in-between the brackets (In this case, \"1\") and store the result in \"singleLetter\".
    \"charAt\" is a method and, when using methods, you place the value you want the method to resolve in the
    brackets after the method.\n\n\n</string>
    <string name="string_question">bestFriendsName = \"Jamilla\";</string>
    <string name="what_is_decisions_text">3.1 Making decisions in Java</string>
    <string name="what_is_decisions_body">Suppose that you wanted to do an action after checking something first.
        An example could be that you wanted to check if \'x\' equals a certain value before adding a value to a
        total, as follows:</string>
    <string name="what_is_decisions_body1">Java allows you to make decisions using the \"if\" keyword. First,
        the keyword \"if\" is inserted as above and then you write the condition that you want to check within
        the brackets. If that condition is true, then the code that has been written within the brackets is
        executed. If the condition isn\'t true, then everything within the braces is ignored and the program
        continues reading any code after the braces. As example is below:</string>
    <string name="what_is_decisions_body2">In the example above, the \'if\' statement first checks whether \'x\'
        is equal to 1. If it is, then \'1\' is added to the \'total\' and stored in the variable \'total\'.\n\n</string>
    <string name="java_quiz_13">Would the code within the braces execute in the following example?</string>
    <string name="java_quiz_13_answer1">Yes</string>
    <string name="java_quiz_13_answer2">No</string>
    <string name="java_quiz_13_answer3">Maybe</string>
    <string name="what_is_elseif_text">3.2 Else-If</string>
    <string name="what_is_elseif_body">There are scenarios when you may want to check multiple conditions
    and then execute different statements or code depending on the value of one or more variables:</string>
    <string name="what_is_elseif_body1">The \"elseif\" keyword allows you to do just that. Going through the code -
        Initially the condition for the first \"if\" is checked. If that\'s not true, then any \"elseif\" parts
        are checked in order. If the condition of any \"elseif\" part is correct, then the code within the braces of
        that \"elseif\" part is executed.\n\nIf, after checking the \"elseif\" parts, none of them are true either, then
        the \"else\" part at the end is executed.\n\nWhen using an \"if\" statement, the \"elseif\" and \"else\" parts
    are optional. It is also important to remember that once any part of this statement is executed, whether the
    \"if\" part, the \"elseif\" part or the \"else\" part, the program executes whatever is in the braces for that
    part then skips any other parts.\n\n</string>
    <string name="java_quiz_14">The \"elseif\" part of the following code is executed because x = 7. What
    part of the code is executed immediately afterwards? The code starting with number..</string>
    <string name="java_quiz_14_answer1">1</string>
    <string name="java_quiz_14_answer2">2</string>
    <string name="java_quiz_14_answer3">3</string>
    <string name="operators_text">3.3 Relational Operators</string>
    <string name="operators_body">When using \"if\" statements or anything else that requires you to compare
    values, there are a range of functions that can be used for this purpose:</string>
    <string name="operators_body1">So how would you use these operators and when would you want to use them?
    Let\'s say that x = 5 and y = 7. You want to check using an \"if\" statement whether x is less than y.
    What you would type is as follows:\n\nif (x &lt; y) {\n&#8230;\n}\n\nIf the condition is correct and x is indeed
        less than y, then the code between the braces is executed. The best way to understand these operators is
    to read out the explanation as you type the code. For example, using the earlier statement example and the guide
        above, the statement can be read as \"If x is less than y, then.. \".\n\nThese operators are an important
    aspect of Java and are used in many things from \"if\" statements to loops (While, Do-While and For loops that
    you will learn about later) to many other things.\n\n</string>
    <string name="java_quiz_15">Some sample code is printed below. Once all the code has been executed,
    the program will print the total. What value will be printed for the total?</string>
    <string name="java_quiz_15_answer1">0</string>
    <string name="java_quiz_15_answer2">5</string>
    <string name="java_quiz_15_answer3">11</string>
    <string name="boolean_text">3.4 Boolean Operators and Variables</string>
    <string name="boolean_body">When using the \"if\" statement, you may have noticed that the condition that
    you\'re trying to test is either true or false. For example:\n\nif (4 &lt;= 5) {&#8230;}\n\nevaluates to true
    because 4 satisfies the \"less than\" part of the condition so the whole condition becomes true. Evaluating
        anything in this way means that you\'re evaluating \"Boolean\" values. Boolean values are only ever true or
        false. You can initialise and declare boolean values as follows:\n\nboolean checkCondition = false;\n\nAnd
        then use this variable in \"if\" statements, loops and other places.\n\nUsing boolean features allows you to
    use boolean operators like &amp;&amp;, || and !:\n\n&amp;&amp; stands for AND and evaluates to true only if both
        sides of AND condition are true\n|| stands for OR and evaluates to true if either side of OR condition are
        true\n! stands for NOT and reverses the boolean value, eg. if the boolean variable is true, then NOT makes
        it false.\n\nThese boolean operators allow you to make more complex conditions that can be tested:\n\nif
    (4 &lt; 5 &amp;&amp; 7 > 6) {&#8230;}\n\nEvaluates to true because both sides of the AND operator are true.\n\n</string>
    <string name="java_quiz_16">Please evaluate the following statement - What does the conditional If statement
        evaluate to?</string>
    <string name="java_quiz_16_answer1">True</string>
    <string name="java_quiz_16_answer2">False</string>
    <string name="java_quiz_17">Please evaluate the following statement - What does the conditional If statement
        evaluate to?</string>
    <string name="java_quiz_17_answer1">True</string>
    <string name="java_quiz_17_answer2">False</string>
    <string name="while_text">4.1 The While loop</string>
    <string name="while_body">Java has features that can be used called \"loops\". Different loops allow you to
        do different things depending on what you want done. There are \"while\" loops, \"do-while\" loops
        and \"for\" loops. This section will teach you about \"while\" loops:</string>
    <string name="while_body1">You\'ve already encountered \"if\" statements. Now, we have \"while\" loops.
        Looking at the example above, while loops also use a condition which it checks before executing
        the code within the braces as long as that condition evaluates to true.\n\nHowever, the key difference
        over an \"if\" statement is that while loops keep continuing to execute the code within the braces
        until the condition attached to the while loop becomes false. Once the condition does\'t evaluate to
        true anymore, the code within the braces isn\'t evaluated and the program continues with any
        code after the loop.\n\nSomething important to remember about variables is that any variables
    declared within the braces are destroyed every time the loop iterates. This also applies to the \"if\"
        statement. If you want to use variables that will be updated by any actions within the loop,
        you should declare them before the loop starts, as with \"int x = 10;\" above.\n\n\n</string>
    <string name="java_quiz_18">How many iterations will the while loop below go through before exiting the
    loop because the condition became false?</string>
    <string name="java_quiz_18_answer1">1</string>
    <string name="java_quiz_18_answer2">7</string>
    <string name="java_quiz_18_answer3">8</string>
    <string name="do_text">4.2 The Do-While loop</string>
    <string name="do_body">A \"do-while\" loop is slightly different from a \"while\" loop. Whereas a
    while loop checks the condition before executing any code and keeps doing it until the condition
    becomes false, a do-while loop executes the code in the braces first before checking the condition
    for the first time:</string>
    <string name="do_body1">After executing the code for the first time, the condition is checked. If the
        condition is false, the code in the braces isn\'t executed again and the program continues with any
        code after the loop. If the condition is true, the code in the braces is executed again and again
        until the condition becomes false.\n\n\n</string>
    <string name="java_quiz_19">How many iterations will the do-while loop below go through before exiting the
    loop because the condition became false?</string>
    <string name="java_quiz_19_answer1">1</string>
    <string name="java_quiz_19_answer2">7</string>
    <string name="java_quiz_19_answer3">8</string>
    <string name="for_text">4.3 The For loop</string>
    <string name="for_body">A \"for\" loop allows you to give a starting point and an end point:</string>
    <string name="for_body1">In a \"for\" loop, there are three conditions placed between the brackets. The
        first is to initialise a variable and the value of this variable acts as a starting point. The
        condition in the middle is the condition that is checked. If the condition is true, the code between
        the braces is executed. Finally, the \"update\" part updates the initialised variable and the
        process is repeated.\n\nFor example, in the image above, the \"for\" loop initialises an int variable
        named \"i\" and sets it to 0. The condition part checks whether i is less than 10 and, if it
        is, executes the code between the braces. Afterwards, \"i++\" (Shorthand for \"i = i + 1\") adds 1
        to \"i\" then the condition is checked again. If it\'s still true, the code between the braces is
        executed again. This is repeated until the condition returns false. At that point, the loop breaks
        to the line right after the loop.\n\n\n</string>
    <string name="java_quiz_20">How many iterations will the For loop below go through before exiting the
    loop because the condition became false?</string>
    <string name="java_quiz_20_answer1">1</string>
    <string name="java_quiz_20_answer2">10</string>
    <string name="java_quiz_20_answer3">6</string>
    <string name="nested_for_text">4.4 Nested For loops</string>
    <string name="nested_for_body">For loops can be nested within one another:</string>
    <string name="nested_for_body1">Initially, \"i\" is set to 0, the condition is checked and then
        you reach the second For loop. For this loop, the same process happens where \"j\" is initialised
        to 0, the condition is checked and then the code within the braces is executed.\n\nThe way to think
        of this second For loop (Or even more loops nested within one another) is to see them as independent
        to the others and focus on what\'s happening in the current loop.\n\nSo, for the second For loop,
        the current value for j will be printed each time the loop iterates. Once the loop ends with
        j not being less than 10, the current value for \"i\" will be printed. The original For loop is updated
        using i++, the condition checked and then we arrive at the second For loop again which, once again,
        prints all current j values. And the cycle repeats until the condition for the First For loop is false
        and the program exits the entire loop.\n\n\n</string>
    <string name="java_quiz_21">What is the name of the loop you would use when you want to execute some
    code once before checking whether a condition is satisfied?</string>
    <string name="java_quiz_21_answer1">While</string>
    <string name="java_quiz_21_answer2">For</string>
    <string name="java_quiz_21_answer3">Do-While</string>
    <string name="java_quiz_22">What is the name of the loop you would use when you want to execute some
    code repeatedly just until the condition is satisfied?</string>
    <string name="java_quiz_22_answer1">While</string>
    <string name="java_quiz_22_answer2">For</string>
    <string name="java_quiz_22_answer3">Do-While</string>
</resources>
